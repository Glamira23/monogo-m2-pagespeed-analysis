<?php
/**
 * Graph template
 *
 * @category PagespeedAnalysis
 * @package  Monogo|PagespeedAnalysis
 * @author   PaweÅ‚ Detka <pawel.detka@monogo.pl>
 */
?>
<?php
/**
 * @var $block \Monogo\PagespeedAnalysis\Block\Adminhtml\Pagespeed\Graph\ChartScript
 */
?>

<?php
$graphData = $this->getData(\Monogo\PagespeedAnalysis\Api\Data\ConfigInterface::GRAPH);
?>

<script>

    require.config({
        paths: {
            chartjs: "//cdnjs.cloudflare.com/ajax/libs/Chart.js/3.2.1/chart.min",
        }
    });

    require(['chartjs'], function (Chart) {

        <?php foreach ($graphData as $key => $item): ?>
        <?php if(!empty($item)): ?>
        <?php foreach ($item as $strategy => $data): ?>

        function getGradient(ctx, chartArea) {
            let width, height, gradient;
            const chartWidth = chartArea.right - chartArea.left;
            const chartHeight = chartArea.bottom - chartArea.top;
            if (gradient === null || width !== chartWidth || height !== chartHeight) {
                // Create the gradient because this is either the first render
                // or the size of the chart has changed
                width = chartWidth;
                height = chartHeight;
                gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
                gradient.addColorStop(0, 'rgb(252,91,86)');
                gradient.addColorStop(0.5, 'rgb(220,125,0)');
                gradient.addColorStop(1, 'rgb(5,170,86)');
            }

            return gradient;
        }

        var CwvLeCls<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-le-cls-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_le_cls_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_le_cls_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_le_cls_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_le_cls_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Current Cumulative Layout Shift CLS (Visual Stability) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_le_cls_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });


        var CwvLeLcp<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-le-lcp-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_le_lcp_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_le_lcp_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_le_lcp_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_le_lcp_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Current Largest Contentful Paint LCP (Loading) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_le_lcp_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var CwvLeFid<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-le-fid-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_le_fid_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_le_fid_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_le_fid_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_le_fid_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Current First Input Delay FID (Interactivity) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_le_fid_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var CwvLeFcp<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-le-fcp-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_le_fcp_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_le_fcp_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_le_fcp_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_le_fcp_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Current First Contentful Paint FCP (Optional) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_le_fcp_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var CwvOleCls<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-ole-cls-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_ole_cls_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_ole_cls_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_ole_cls_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_ole_cls_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Origin Cumulative Layout Shift CLS (Visual Stability) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_ole_cls_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });


        var CwvOleLcp<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-ole-lcp-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_ole_lcp_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_ole_lcp_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_ole_lcp_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_ole_lcp_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Origin Largest Contentful Paint LCP (Loading) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_ole_lcp_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var CwvOleFid<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-ole-fid-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_ole_fid_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_ole_fid_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_ole_fid_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_ole_fid_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Origin First Input Delay FID (Interactivity) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_ole_fid_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var CwvOleFcp<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('cwv-ole-fcp-<?= $strategy ?>-<?= str_replace('=', '', $key) ?>'), {
            type: "bar",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: 'Fast',
                        data: <?= json_encode($data['cwv_ole_fcp_fast']) ?>,
                        backgroundColor: 'rgb(11,206,107)',
                        order: 1
                    },
                    {
                        label: 'Average',
                        data: <?= json_encode($data['cwv_ole_fcp_average']) ?>,
                        backgroundColor: 'rgba(255,164,0)',
                        order: 1
                    },
                    {
                        label: 'Slow',
                        data: <?= json_encode($data['cwv_ole_fcp_slow']) ?>,
                        backgroundColor: 'rgba(255,78,65)',
                        order: 1
                    },
                    {
                        label: 'Score',
                        data: <?= json_encode($data['cwv_ole_fcp_category_numbers']) ?>,
                        backgroundColor: 'rgb(24,66,234)',
                        borderColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;

                            if (!chartArea) {
                                return null;
                            }
                            return getGradient(ctx, chartArea);
                        },
                        type: 'line',
                        order: 0
                    }
                ]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: 'Origin First Contentful Paint FCP (Optional) <?= $strategy ?>'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                if (tooltipItem['dataset']['label'] == 'Score') {
                                    return tooltipItem['dataset']['label'] + ': ' +' <?= ucfirst(strtolower($data['cwv_ole_fcp_category'])) ?>';
                                } else {
                                    return tooltipItem['dataset']['label'] + ': ' + Math.round(tooltipItem['raw'] * 100) / 100 + '%';
                                }
                            }
                        }
                    }
                },
                responsive: true,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        var chartMain<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('main-<?=$strategy?>-<?=  str_replace('=', '', $key) ?>'), {
            type: "line",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: "Performance",
                        data: <?= json_encode($data['performance']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getPerformanceColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,

                    },
                    {
                        label: "SEO",
                        data: <?= json_encode($data['seo']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getSeoColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "PWA",
                        data: <?= json_encode($data['pwa']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getPwaColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },

                    {
                        label: "Best Practices",
                        data: <?= json_encode($data['best_practices']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getBestPracticesColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "Accessibility",
                        data: <?= json_encode($data['accessibility']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getAccessibilityColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },

                ]
            },
            options: {
                <?php if(!$this->getEnableAnimations()): ?>
                animation: {
                    duration: 0
                },
                <?php endif; ?>
                title: {
                    display: true,
                    text: '<?=  ucfirst($strategy) ?> PageSpeed score for <?= base64_decode($key) ?> (<?= __('last') . ' ' . $block->getChartHistory() . ' ' . __('days') ?>)'
                },
                tooltips: {
                    position: 'nearest',
                    intersect: false,
                    mode: 'index'
                },
                responsive: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            <?php if(!$this->getUseAutoscale()): ?>
                            beginAtZero: true,
                            max: 100,
                            <?php endif; ?>
                            callback: function (value, index, values) {
                                return value + '%';
                            }
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            <?php if($this->getHideOxValues()): ?>
                            display: false,
                            <?php endif; ?>
                        }
                    }]

                }
            }
        });
        var chartTtfb<?= str_replace('=', '', $key)?><?=  $strategy ?>
            = new Chart(document.getElementById('ttfb-<?=$strategy?>-<?=  str_replace('=', '', $key) ?>'), {
            type: "line",
            data: {
                labels: <?= json_encode($data['created_at']) ?>,
                datasets: [
                    {
                        label: "TTFB",
                        data: <?= json_encode($data['ttfb']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getTtfbColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "First Contentful Paint",
                        data: <?= json_encode($data['first_contentful_paint']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getFirstContentfulPaintColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "First Meaningful Paint",
                        data: <?= json_encode($data['first_meaningful_paint']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getFirstMeaningfulPaintColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "Speed Index",
                        data: <?= json_encode($data['speed_index']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getSpeedIndexColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "Interactive",
                        data: <?= json_encode($data['interactive']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getInteractiveColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    },
                    {
                        label: "First CPU Idle",
                        data: <?= json_encode($data['first_cpu_idle']) ?>,
                        fill: false,
                        borderColor: "<?= $block->getFirstCpuIdleColor() ?>",
                        lineTension: 0.1,
                        pointRadius: <?= $block->getPointRadius() ?>,
                        pointHoverRadius: <?= $block->getPointHoverRadius() ?>,
                    }
                ]
            },
            options: {
                <?php if(!$this->getEnableAnimations()): ?>
                animation: {
                    duration: 0
                },
                <?php endif; ?>
                title: {
                    display: true,
                    text: '<?=  ucfirst($strategy) ?> Timing for <?= base64_decode($key) ?> (<?= __('last') . ' ' . $block->getChartHistory() . ' ' . __('days') ?>)'
                },
                tooltips: {
                    position: 'nearest',
                    intersect: false,
                    mode: 'index'
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            <?php if(!$this->getUseAutoscale()): ?>
                            beginAtZero: true,
                            max: <?= $this->getMaxValue($strategy) ?>,
                            <?php endif; ?>
                            callback: function (value, index, values) {
                                return value + 'ms';
                            }
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            <?php if($this->getHideOxValues()): ?>
                            display: false,
                            <?php endif; ?>
                        }
                    }]
                },
                plugins: {
                    <?php if($this->getUseZoom()): ?>
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'x',
                            sensitivity: <?= $this->getZoomSensitivity() ?>

                        },
                        zoom: {
                            enabled: true,
                            mode: 'x',
                            sensitivity: <?= $this->getZoomSensitivity() ?>
                        }
                    }
                    <?php endif ?>
                }
            }
        });

        <?php endforeach; ?>
        <?php endif; ?>
        <?php endforeach; ?>
    });

</script>
